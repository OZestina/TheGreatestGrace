main.ts
  - 실행이 되는 기본 파일

Module
  - Nest가 애플리케이션 구조를 구성하는데 사용하는 메타 데이터 제공
  - 기능별로 구성 (유저, 주문, 챗 등)
  - @Module() 데코레이터 필요
  - 기본적으로 싱글톤, 여러 모듈 간에 동일한 인스턴스 공유 가능
  
app.module.ts
  - 루트 모듈. Nest가 사용하는 시작점

Controller
  - @Controller() 데코레이터 필요
  - 필요한 Service를 생성자에 private로 추가해 종속성 타입으로 서비스 사용

Provider
  - 사용하기 위해서 모듈의 Provider에 추가해줘야 한다
  - Service, Repository, Factory, Helper 등
  - 종속성으로 주입할 수 있다

Service
  - @Injectable() 데코레이터로 모듈에 제공, 애플리케이션 전체에서 사용될 수 있음
  - 컨트롤러에서 데이터 유효성 체크, 데이터베이스 아이템 생성 등의 작업 처리
  - 종속성 주입(Controller 생성자에서 private로 생성 등)으로 사용됨

Entity
  - 

Repository
  - 

DTO (Data Transfer Object)
  - 계층간 데이터 교환을 위한 객체, 데이터가 네트워크를 통해 전송되는 방법 정의
  - DB에서 데이터를 얻어 Service나 Controller에 전달할 때 사용
  - interface나 class를 이용해 정의 가능 (Nest JS에서는 class 추천)
    > class는 런타임에서 작동하기 때문에 파이프같은 기능을 이용할 때 더 유용함
  - 데이터 유효성을 체크하는데 효율적 (더 안정적인 코드..!)
