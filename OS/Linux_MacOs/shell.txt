<환경변수>
1) 로컬 환경변수 선언
    export 변수이름=변수값         //=앞뒤에 띄어쓰기없음!
2) 로컬 환경변수 확인하기
    echo $변수이름                //출력값이 설정했던 변수값인지 확인
    
<find 명령어>
find (조건) -exec (명령어) {} [exec 추가조건] \;

{} 는 찾은 파일을 의미
-exec 은 ;까지의 내용을 명령한다. ;은 특수한 내용이 있으니 (함수 실행의 기준) 세미콜론으로 읽히도록 앞에 \를 붙여준다
man basename:                   // 파일명만 출력

<awk 명령어>
awk 'pattern { action }'
    pattern 은 조건을 나타냄        ex) NR%2==1    생략될 경우 default값은 '모든 레코드'
    action  은 실행 내용을 나타냄    ex) {print}    생략될 경우 default값은 'print(출력)'
    
awk -v start=$FT_LINE1 -v end=$FT_LINE2 'NR>=start && NR<=end'
    변수 선언된 내용을 awk 안에서 사용하고 싶다면 -v 옵션으로 가져와서 사용하자 [ -v var=value ]

awk 'NR%2==0'

    
<grep 명령어>
grep -v '^#'
    -v 는 반대를 뜻하는 옵션.
    -v '^#' 는 #으로 시작하지 않는 것을 의미한다

<sed 명령어>
sed 's/:.*$//g'

sed 's/,$/./g'

<tr 명령어>
tr '\n' ","
tr -d '\n'




<계산기능>
bc

xrgs 앞에서 받은 내용을 인자로 리턴한다

echo $FT_NBR1+$FT_NBR2 | tr "mrdoc\'\"\?\!\\" "0123402341" | xargs echo "obase=13;ibase=5;" | bc | tr "0123456789ABC" "gtaio luSnemf"



<vim>
Vimtutor 명령어로 간단한 조작어 연습을 할 수 있다


<디버깅>
gcc -g (-c 였던가..?) 옵션으로 디버깅 파일을 만들 수 있다
그렇게 만들어진 파일을 lldb로 실행 (lldb a.out)해 디버깅 고고싱
lldb안에서 -r (함수 실행) -s (start) -n (함수 내 진입 없이 다음 줄로 고)
변수 내 저장된 값 보여주는 것도 있었는데 잊어버림^^
